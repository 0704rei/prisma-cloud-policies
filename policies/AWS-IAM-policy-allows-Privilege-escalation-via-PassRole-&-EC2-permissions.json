{
  "policyUpi": "",
  "policyId": "3ed41ee9-448e-40fc-951a-21d2ed478e45",
  "policyType": "iam",
  "cloudType": "aws",
  "severity": "medium",
  "name": "AWS IAM policy allows Privilege escalation via PassRole & EC2 permissions",
  "description": "With access to the iam:PassRole and ec2:RunInstances permissions, an adversary can create a new EC2 instance and pass a more privileged role to it. This would allow an adversary to escalate privileges to the more privileged role.",
  "rule.criteria": "3ed41ee9-448e-40fc-951a-21d2ed478e45",
  "searchModel.query": "config from iam where action.name CONTAINS ALL ( 'iam:PassRole', 'ec2:RunInstances' ) AND dest.cloud.wildcardscope = true and grantedby.cloud.policy.condition ('iam:PassedToService') does not exist and source.cloud.resource.id DOES NOT END WITH ':root'",
  "recommendation": "Do not use wildcards in a policy's statement Resource element with these permissions, as it creates a risk of Privilege Escalation. If identity requires the use of these permissions to pass a role to an EC2 instance, make sure the policy is scoped to only the resources needed. The same granular logic can be applied with EC2 as the following example using the lambda function. https://aws.amazon.com/premiumsupport/knowledge-center/granular-access-lambda/\n\nRemediation steps:\n1. Log in to the AWS console\n2. Navigate to the EC2 instance\n3. Find the role used by the EC2 instance\n4. Navigate to the IAM service\n5. Click on Roles\n6. Choose the relevant role\n7. Under ''Permissions policies'', find the relevant policy according to the alert details and remove the risky actions",
  "remediable": true,
  "remediation.cliScriptTemplate": "dynamic aws cli commands",
  "remediation.description": "List of CLI commands are generated dynamically based on the violating resource. Successful execution will limit the relevant permissions of the violating resource.",
  "remediation.impact": "limit the relevant permissions of the violating resource",
  "compliance.standard": ""
}